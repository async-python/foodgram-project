name: yamdb_workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: flake8

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - id: dotenv
        uses: ./.github/actions/dotenv-action
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ steps.dotenv.outputs.docker_username }}
          password: ${{ steps.dotenv.outputs.docker_password }}
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: vardeath/foodgram:v1.0

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: contains('
      refs/heads/master
      refs/heads/main
      ', github.ref)
    steps:
      - id: dotenv
        uses: ./.github/actions/dotenv-action
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ steps.dotenv.outputs.host }}
          username: ${{ steps.dotenv.outputs.user }}
          key: ${{ steps.dotenv.outputs.ssh_key }}
          passphrase: ${{ steps.dotenv.outputs.passphrase }}
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          passphrase: ${{ secrets.PASSPHRASE }}
          source: "docker-compose.yaml, nginx/default.conf"
          target: "~/app/"
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
#        env:
#          PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
        with:
          host: ${{ steps.dotenv.outputs.host }}
          username: ${{ steps.dotenv.outputs.user }}
          key: ${{ steps.dotenv.outputs.ssh_key }}
          passphrase: ${{ steps.dotenv.outputs.passphrase }}
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ~/app/
            rm .env
            touch .env
            echo 'DB_ENGINE="${{ steps.dotenv.outputs.db_engine }}"' >> .env
            echo 'DB_HOST=${{ steps.dotenv.outputs.db_host }}' >> .env
            echo 'DB_NAME=${{ steps.dotenv.outputs.db_name }}' >> .env
            echo 'DB_PORT=${{ steps.dotenv.outputs.db_port }}' >> .env
            echo 'POSTGRES_USER=${{ steps.dotenv.outputs.postgres_user }}' >> .env
            echo 'POSTGRES_PASSWORD=${{ steps.dotenv.outputs.postgres_password }}' >> .env
            echo 'SECRET_KEY=${{ steps.dotenv.outputs.secret_key }}' >> .env
            echo 'PROD=True' >> .env
#            echo 'DB_ENGINE="${{ secrets.DB_ENGINE }}"' >> .env
#            echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
#            echo 'DB_NAME=${{ secrets.DB_NAME }}' >> .env
#            echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env
#            echo 'POSTGRES_USER=${{ secrets.POSTGRES_USER }}' >> .env
#            echo 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' >> .env
#            echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env
#            echo 'PROD=True' >> .env
            sudo docker-compose down
            sudo docker-compose rm web
            sudo docker-compose pull web
            sudo docker-compose up -d
            sudo docker-compose run --rm web python manage.py migrate
            sudo docker-compose run --rm web python manage.py collectstatic --no-input

#  send_message:
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#      - name: Telegram Message Notify
#        uses: appleboy/telegram-action@master
#        with:
#          to: ${{ secrets.TELEGRAM_TO }}
#          token: ${{ secrets.TELEGRAM_TOKEN }}
#          message: ${{ github.workflow }} успешно выполнен!